<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="admin">
	<select id="selectAllMember" parameterType="map" resultType="m">
		select
			member_no as memberNo,
			member_level as memberLevel,
			member_id as memberId,
			member_name as memberName,
			phone,
			enroll_date as enrollDate
		from (select rownum as rnum, m.* from (SELECT * FROM MEMBER order by 1 desc)m)
		where rnum between #{start} and #{end}
	</select>
	<select id="memberTotal" resultType="_int">
		select count(*) from member
	</select>
	<select id="searchMember" parameterType="map" resultType="m">
		select
			member_no as memberNo,
			member_level as memberLevel,
			member_id as memberId,
			member_name as memberName,
			phone,
			enroll_date as enrollDate
		from (select rownum as rnum, m.* from (select * from member
		<choose>
			<when test="type != null and type.equals('memberId')">
				where member_id like '%'||#{keyword}||'%'
			</when>
			<when test="type != null and type.equals('memberName')">
				where member_name like '%'||#{keyword}||'%'
			</when>
			<when test="type != null and type.equals('phone')">
				where phone like '%'||#{keyword}||'%'
			</when>
		</choose>
		<if test="level != null">
			and member_level in
			<foreach collection="level" item="l" open="(" close=")" separator=",">
				<choose>
					<when test='l == 1'>
						1,5
					</when>
					<when test='l == 3'>
						3,6,7
					</when>
					<otherwise>
						#{l}
					</otherwise>
				</choose>
			</foreach>
		</if>
		order by 1 desc)m)
		where rnum between #{start} and #{end}
	</select>
	<select id="totalSearch" parameterType="map" resultType="_int">
		select count(*) from member
		<choose>
			<when test="type != null and type.equals('memberId')">
				where member_id like '%'||#{keyword}||'%'
			</when>
			<when test="type != null and type.equals('memberName')">
				where member_name like '%'||#{keyword}||'%'
			</when>
			<when test="type != null and type.equals('phone')">
				where phone like '%'||#{keyword}||'%'
			</when>
		</choose>
		<if test="level != null">
			and member_level in
			<foreach collection="level" item="l" open="(" close=")" separator=",">
				<choose>
					<when test='l == 1'>
						1,5
					</when>
					<when test='l == 3'>
						3,6,7
					</when>
					<otherwise>
						#{l}
					</otherwise>
				</choose>
			</foreach>
		</if>
	</select>
	<select id="selectMemberInfo" parameterType="_int" resultType="m">
		select
			member_no as memberNo,
			member_id as memberId,
			member_pw as memberPw,
			member_name as memberName,
			phone,
			email,
			enroll_date as enrollDate,
			member_filepath as filepath,
			member_level as memberLevel,
			gender,
			age,
			profile_status as profileStatus
		from member where member_no=#{memberNo}
	</select>
	<update id="memberUpdate" parameterType="um">
		update member set
		<if test="filepath != null">
			member_filepath = #{filepath},		
		</if>
			member_pw = #{memberPw},
			member_name = #{memberName},
			phone = #{phone},
			gender = #{gender},
			age = #{age}
		<if test="helperStatus != null or memberLevel == 5 or memberLevel == 7">
			<choose>
				<when test="memberLevel == 4 and helperStatus.equals('on')">
					,member_level = 5
				</when>
				<when test="memberLevel == 6 and helperStatus.equals('on')">
					,member_level = 7
				</when>
				<when test="memberLevel == 5 and helperStatus == null">
					,member_level = 4
				</when>
				<when test="memberLevel == 7 and helperStatus == null">
					,member_level = 6
				</when>
			</choose>
		</if>
		where member_no = #{memberNo}
	</update>
	<insert id="insertProfile" parameterType="p">
		insert into profile values(p_seq.nextval, #{pWriter}, #{pGender}, #{pAge}, #{pLocal},
												#{pSmoke}, #{pPet}, #{pCleaning}, #{pPattern})
	</insert>
	<select id="selectProfile" parameterType="string" resultType="p">
		select
			p_no as pNo,
			p_writer as pWriter,
			p_gender as pGender,
			p_age as pAge,
			p_local as pLocal,
			p_smoke as pSmoke,
			p_pet as pPet,
			p_cleaning as pCleaning,
			p_pattern as pPattern
		from profile where p_writer=#{memberId}
	</select>
	<update id="updateProfile" parameterType="p">
		update profile set
			p_writer = #{pWriter},
			p_gender = #{pGender},
			p_age = #{pAge},
			p_local = #{pLocal},
			p_smoke = #{pSmoke},
			p_pet = #{pPet},
			p_cleaning = #{pCleaning},
			p_pattern = #{pPattern}
		where p_writer = #{pWriter}
	</update>
	<delete id="deleteProfile" parameterType="string">
		delete from profile where p_writer = #{pWriter}
	</delete>
	<select id="selectAllReport" parameterType="map" resultType="rp">
		select
			report_no as reportNo,
			report_category as reportCategory,
			report_num as reportNum,
			reporter,
			atacker,
    		(select member_id from member where member_no=reporter) reporterId,
    		(select member_id from member where member_no=atacker) atackerId,
			report_content as reportContent,
			report_date as reportDate,
			report_status as reportStatus
		from (select rownum as rnum, r.* from (SELECT * FROM report order by 1 desc)r)
		where rnum between #{start} and #{end}
	</select>
	<select id="reportTotal" resultType="_int">
		select count(*) from report
	</select>
	<select id="searchReport" parameterType="map" resultType="rp">
		select
		    report_no as reportNo,
		    report_category as reportCategory,
		    report_num as reportNum,
		    reporter,
		    atacker,
		    (select member_id from member where member_no=reporter) reporterId,
		    (select member_id from member where member_no=atacker) atackerId,
		    report_content as reportContent,
		    report_date as reportDate,
		    report_status as reportStatus
		from (select rownum as rnum, r.* from (select * from report
		<choose>
			<when test="type != null and type.equals('reporterId')">
				where reporter in (select member_no from member where member_id like '%'||#{keyword}||'%')
			</when>
			<when test="type != null and type.equals('atackerId')">
				where atacker in (select member_no from member where member_id like '%'||#{keyword}||'%')
			</when>
			<when test="type != null and type.equals('reportNum')">
				where report_num like '%'||#{keyword}||'%'
			</when>
		</choose>
		<if test="status != null">
			and report_status in
			<foreach collection="status" item="s" open="(" close=")" separator=",">
				#{s}
			</foreach>
		</if>
		<if test="cate != null">
			and report_category in
			<foreach collection="cate" item="c" open="(" close=")" separator=",">
				#{c}
			</foreach>
		</if>
		order by 1 desc)r)
		where rnum between #{start} and #{end}
	</select>
	<select id="totalSearchReport" parameterType="map" resultType="_int">
		select count(*) from report
		<choose>
			<when test="type != null and type.equals('reporterId')">
				where reporter in (select member_no from member where member_id like '%'||#{keyword}||'%')
			</when>
			<when test="type != null and type.equals('atackerId')">
				where atacker in (select member_no from member where member_id like '%'||#{keyword}||'%')
			</when>
			<when test="type != null and type.equals('reportNum')">
				where report_num like '%'||#{keyword}||'%'
			</when>
		</choose>
		<if test="status != null">
			and report_status in
			<foreach collection="status" item="s" open="(" close=")" separator=",">
				#{s}
			</foreach>
		</if>
		<if test="cate != null">
			and report_category in
			<foreach collection="cate" item="c" open="(" close=")" separator=",">
				#{c}
			</foreach>
		</if>
	</select>
	<select id="selectOneReport" parameterType="_int" resultType="rp">
		select
		    report_no as reportNo,
		    report_category as reportCategory,
		    report_num as reportNum,
		    reporter,
		    atacker,
		    (select member_id from member where member_no=reporter) reporterId,
		    (select member_id from member where member_no=atacker) atackerId,
		    report_content as reportContent,
		    report_date as reportDate,
		    report_status as reportStatus
		from report where report_no = #{reportNo}
	</select>
	<update id="updateReport" parameterType="rp">
		update report set report_status = #{reportStatus} where report_no = #{reportNo} 
	</update>
	<select id="selectAllHouse" parameterType="map" resultType="h">
		select
		    house_no as houseNo,
		    member_no as memberNo,
		    (select member_id from member where member_no = hh.member_no) memberId,
		    house_title as houseTitle,
            (select address_name from address where address_category = 1 and address_number = house_no) as addressName,
            (select address_road from address where address_category = 1 and address_number = house_no) as addressRoad,
            (select address_detail from address where address_category = 1 and address_number = house_no) as addressDetail,
		    houseowner_deadline as houseownerDeadline,
		    house_selling as houseSelling,
		    house_allow as houseAllow
		from (select rownum as rnum, h.* from (select * from house order by 1 desc)h)hh where rnum between #{start} and #{end}
	</select>
	<select id="houseTotal" resultType="_int">
		select count(*) from house
	</select>
	<select id="searchHouse" parameterType="map" resultType="h">
		select
		    house_no as houseNo,
		    member_no as memberNo,
		    (select member_id from member where member_no = hhh.member_no) memberId,
		    house_title as houseTitle,
            (select address_name from address where address_category = 1 and address_number = house_no) as addressName,
            (select address_road from address where address_category = 1 and address_number = house_no) as addressRoad,
            (select address_detail from address where address_category = 1 and address_number = house_no) as addressDetail,
		    houseowner_deadline as houseownerDeadline,
		    house_selling as houseSelling,
		    house_allow as houseAllow
		from (select rownum as rnum, hh.* from (select h.*, address_name from house h left join address on (house_no = address_number)
		<choose>
			<when test="type != null and type.equals('houseTitle')">
				where house_title like '%'||#{keyword}||'%'
			</when>
			<when test="type != null and type.equals('memberId')">
				where member_no in (select member_no from member where member_id like '%'||#{keyword}||'%')
			</when>
		</choose>
		<if test="status != null">
			and house_allow in
			<foreach collection="status" item="s" open="(" close=")" separator=",">
				<choose>
					<when test='s == 1'>
						1,4
					</when>
					<otherwise>
						#{s}
					</otherwise>
				</choose>
			</foreach>
		</if>
		<if test="!addrName.equals('지역구 선택')">
			and address_name = #{addrName}
		</if>
		and address_category = 1 order by 1 desc)hh)hhh where rnum between #{start} and #{end}
	</select>
	<select id="totalSearchHouse" parameterType="map" resultType="_int">
		select count(*) from (select h.*, address_name from house h left join address on (house_no = address_number)
		<choose>
			<when test="type != null and type.equals('houseTitle')">
				where house_title like '%'||#{keyword}||'%'
			</when>
			<when test="type != null and type.equals('memberId')">
				where member_no in (select member_no from member where member_id like '%'||#{keyword}||'%')
			</when>
		</choose>
		<if test="status != null">
			and house_allow in
			<foreach collection="status" item="s" open="(" close=")" separator=",">
				<choose>
					<when test='s == 1'>
						1,4
					</when>
					<otherwise>
						#{s}
					</otherwise>
				</choose>
			</foreach>
		</if>
		<if test="!addrName.equals('지역구 선택')">
			and address_name = #{addrName}
		</if>
		and address_category = 1)
	</select>
	<select id="selectOneHouse" parameterType="_int" resultType="h">
		select
		    house_no as houseNo,
		    member_no as memberNo,
		    house_title as houseTitle,
		    (select member_id from member where member_no = h.member_no) memberId,
		    (select income_bank||' '||income_account||' '||income_name from income where income_category = 2 and income_num = h.house_no) accountInfo,
            house_charge as houseCharge,
            house_gender as houseGender,
            house_form as houseForm,
            house_room as houseRoom,
		    houseowner_deadline as houseownerDeadline,
		    refuse_reason as refuseReason,
            (select address_name from address where address_category = 1 and address_number = house_no) as addressName,
            (select address_road from address where address_category = 1 and address_number = house_no) as addressRoad,
            (select address_detail from address where address_category = 1 and address_number = house_no) as addressDetail,
            house_convenience as houseConvenience,
            house_content as houseContent,
            house_rule as houseRule,
            house_allow as houseAllow,
		    house_selling as houseSelling
		from house h where house_no = #{houseNo}
	</select>
	<select id="selectHouseRoom" parameterType="_int" resultType="r">
		select 
			room_no as roomNo,
			house_no as houseNo,
			room_title as roomTitle,
			room_size as roomSize,
			room_phone as roomPhone,
			room_status as roomStatus,
			room_charge as roomCharge,
			room_content as roomContent,
			room_personnel as roomPersonnel,
			room_month as roomMonth
		from room where house_no = #{houseNo}
	</select>
	<select id="selectHousePhoto" parameterType="_int" resultType="f">
		select
			photo_no as photoNo,
			photo_path as photoPath
		from photo where photo_category = 1 and photo_num = #{houseNo}
	</select>
	<update id="updateHouse" parameterType="h">
		update house set
			house_allow = #{houseAllow},
			refuse_reason = #{refuseReason}
		where house_no = #{houseNo}
	</update>
	<select id="selectAllHelper" parameterType="map" resultType="hp">
		select distinct hhhh.* from(
			select
			    helper_no as helperNo,
			    member_no as memberNo,
			    (select member_id from member where member_no = hhh.member_no) memberId,
			    helper_name as helperName,
			    (select member_name from member where member_no = hhh.member_no) memberName,
			    (select member_level from member where member_no = hhh.member_no) memberLevel,
			    (select	regexp_replace(listagg(address_name, '/') within group(order by address_name), '([^/]+)(/\1)*(/|$)', '\1\3')
			        from address where address_category = 2 and address_number = hhh.helper_no) addressName,
			    helper_status as helperStatus
			from (select rownum as rnum, hh.* from (select * from helper)hh)
				hhh where rnum between #{start} and #{end}
		)hhhh order by 1 desc
	</select>
	<select id="helperTotal" resultType="_int">
		select count(*) from helper
	</select>
	<select id="searchHelper" parameterType="map" resultType="hp">
		select distinct hhhh.* from(
			select
				helper_no as helperNo,
				member_no as memberNo,
				(select member_id from member where member_no = hhh.member_no) memberId,
				helper_name as helperName,
				(select member_name from member where member_no = hhh.member_no) memberName,
				(select member_level from member where member_no = hhh.member_no) memberLevel,
				(select	regexp_replace(listagg(address_name, '/') within group(order by address_name), '([^/]+)(/\1)*(/|$)', '\1\3')
					from address where address_category = 2 and address_number = hhh.helper_no) addressName,
				helper_status as helperStatus
			from (select rownum as rnum, hh.* from (select * from helper
			<choose>
				<when test="type != null and type.equals('helperName')">
					where helper_name like '%'||#{keyword}||'%'
				</when>
				<when test="type != null and type.equals('memberId')">
					where member_no in (select member_no from member where member_id like '%'||#{keyword}||'%')
				</when>
				<when test="type != null and type.equals('memberName')">
					where member_no in (select member_no from member where member_name like '%'||#{keyword}||'%')
				</when>
			</choose>
			<if test="status != null">
				and helper_status in
				<foreach collection="status" item="s" open="(" close=")" separator=",">
					<choose>
						<when test='s == 1'>
							1,4
						</when>
						<otherwise>
							#{s}
						</otherwise>
					</choose>
				</foreach>
			</if>
			<if test="!addrName.equals('지역구 선택')">
				and address_name = #{addrName}
			</if>
			)hh)hhh where rnum between #{start} and #{end}
		)hhhh order by 1 desc
	</select>
	<select id="totalSearchHelper" parameterType="map"	resultType="_int">
		select count(*) from
			(select distinct member_no from
			((select * from helper
			<choose>
				<when test="type != null and type.equals('helperName')">
					where helper_name like '%'||#{keyword}||'%'
				</when>
				<when test="type != null and type.equals('memberId')">
					where member_no in (select member_no from member where member_id like '%'||#{keyword}||'%')
				</when>
				<when test="type != null and type.equals('memberName')">
					where member_no in (select member_no from member where member_name like '%'||#{keyword}||'%')
				</when>
			</choose>
			<if test="status != null">
				and helper_status in
				<foreach collection="status" item="s" open="(" close=")" separator=",">
					<choose>
						<when test='s == 1'>
							1,4
						</when>
						<otherwise>
							#{s}
						</otherwise>
					</choose>
				</foreach>
			</if>
			<if test="!addrName.equals('지역구 선택')">
				and address_name = #{addrName}
			</if>
			)))
	</select>
	<select id="selectOneHelper" parameterType="_int" resultType="hp">
		select
		    helper_no as helperNo,
		    member_no as memberNo,
		    helper_filepath as helperFilepath,
		    (select member_id from member where member_no = h.member_no) memberId,
		    helper_name as helperName,
		    helper_category as helperCategory,
		    helper_start_time as helperStartTime,
		    helper_end_time as helperEndTime,
		    helper_ride as helperRide,
		    helper_intro as helperIntro,
		    helper_credit as helperCredit,
		    (select member_name from member where member_no = h.member_no) memberName,
		    (select member_level from member where member_no = h.member_no) memberLevel,
		    helper_status as helperStatus,
		    helper_refuse as helperRefuse,
		    (select income_bank||' '||income_account||' '||income_name from income where income_category = 1 and income_num = h.helper_no) accountInfo
		from helper h where helper_no = #{helperNo}
	</select>
	<select id="selectHelperAddr" parameterType="_int" resultType="addr">
		select
			address_name as addressName,
			address_road as addressRoad
		from address where address_category = 2 and address_number = #{helperNo}
	</select>
	<update id="updateHelper" parameterType="hp">
		update helper set
			helper_status = #{helperStatus},
			helper_refuse = #{helperRefuse}
		where helper_no = #{helperNo}
	</update>
	<select id="selectAllSales" parameterType="map" resultType="kr.or.admin.model.vo.Sales">
		select
		    pay_no as payNo,
		    pay_category as payCategory,
		    pay_goods as payGoods,
		    pay_id as pMemberId,
		    member_id as sMemberId,
		    (select member_no from member where member_id = aa.pay_id) pMemberNo,
		    member_no as sMemberNo,
		    pay_date as payDate,
		    pay_price as payPrice,
		    (select count(*) from adjust where pay_no = aa.pay_no) settlement
		from
		    (select rownum as rnum, a.* from
		        (select * from
		            (select p.pay_no, p.pay_category, p.pay_goods, p.pay_price, p.pay_id, substr(p.pay_date,1,10) pay_date, h.member_no, mem.member_id
		            from pay p
		            left join move m on(p.pay_goods = m.move_no)
		            left join room r on (m.room_no = r.room_no)
		            left join house h on (r.house_no = h.house_no)
		            left join member mem on (h.member_no = mem.member_no)
		            where pay_category=2 and pay_status='정산대기'
		            union
		            select p.pay_no, p.pay_category, p.pay_goods, p.pay_price, p.pay_id, substr(p.pay_date,1,10) pay_date, h.member_no, mem.member_id
		            from pay p
		            left join helplist h on (p.pay_goods = h.help_no)
		            left join helper hh on (h.helper_no = hh.helper_no)
		            left join member mem on (hh.member_no = mem.member_no)
		            where pay_category=1 and pay_status='정산대기')
		            order by pay_date desc
		        )a
		    )aa
		where rnum between #{start} and #{end}
	</select>
	<select id="salesTotal" resultType="_int">
		select count(*) from pay where pay_status='정산대기'
	</select>
	<select id="searchSales" parameterType="map" resultType="kr.or.admin.model.vo.Sales">
		select
		    pay_no as payNo,
		    pay_category as payCategory,
		    pay_goods as payGoods,
		    pay_id as pMemberId,
		    member_id as sMemberId,
		    (select member_no from member where member_id = aa.pay_id) pMemberNo,
		    member_no as sMemberNo,
		    pay_date as payDate,
		    pay_price as payPrice,
		    settlement
		from
		    (select rownum as rnum, a.* from
		        (select * from
		            (select p.pay_no, p.pay_category, p.pay_goods, p.pay_price, p.pay_id, substr(p.pay_date,1,10) pay_date, h.member_no, mem.member_id,  (select count(*) from adjust where pay_no = p.pay_no) settlement
		            from pay p
		            left join move m on(p.pay_goods = m.move_no)
		            left join room r on (m.room_no = r.room_no)
		            left join house h on (r.house_no = h.house_no)
		            left join member mem on (h.member_no = mem.member_no)
		            where pay_category=2 and pay_status='정산대기'
		            union
		            select p.pay_no, p.pay_category, p.pay_goods, p.pay_price, p.pay_id, substr(p.pay_date,1,10) pay_date, h.member_no, mem.member_id,  (select count(*) from adjust where pay_no = p.pay_no) settlement
		            from pay p
		            left join helplist h on (p.pay_goods = h.help_no)
		            left join helper hh on (h.helper_no = hh.helper_no)
		            left join member mem on (hh.member_no = mem.member_no)
		            where pay_category=1 and pay_status='정산대기')
					<choose>
						<when test="type != null and type.equals('memberId')">
							where pay_id like '%'||#{keyword}||'%'
						</when>
						<when test="type != null and type.equals('memberId2')">
							where member_id like '%'||#{keyword}||'%'
						</when>
					</choose>
					<if test="status != null">
						and settlement in
						<foreach collection="status" item="s" open="(" close=")" separator=",">
								#{s}
						</foreach>
					</if>
					<if test="!startDate.equals('') or !endDate.equals('')">
						<choose>
							<when test="!startDate.equals('') and endDate.equals('')">
								and #{startDate} <![CDATA[ <= ]]> pay_date
							</when>
							<when test="startDate.equals('') and !endDate.equals('')">
								and pay_date <![CDATA[ <= ]]> #{endDate}
							</when>
							<when test="!startDate.equals('') and !endDate.equals('')">
								and #{startDate} <![CDATA[ <= ]]> pay_date and pay_date <![CDATA[ <= ]]> #{endDate}
							</when>
						</choose>
					</if>
		            order by pay_date desc
		        )a
		    )aa
		where rnum between #{start} and #{end}
	</select>
	<select id="totalSearchSales" parameterType="map" resultType="_int">
        select count(*) from
            (select p.pay_no, p.pay_category, p.pay_goods, p.pay_price, p.pay_id, substr(p.pay_date,1,10) pay_date, h.member_no, mem.member_id,  (select count(*) from adjust where pay_no = p.pay_no) settlement
            from pay p
            left join move m on(p.pay_goods = m.move_no)
            left join room r on (m.room_no = r.room_no)
            left join house h on (r.house_no = h.house_no)
            left join member mem on (h.member_no = mem.member_no)
            where pay_category=2 and pay_status='정산대기'
            union
            select p.pay_no, p.pay_category, p.pay_goods, p.pay_price, p.pay_id, substr(p.pay_date,1,10) pay_date, h.member_no, mem.member_id,  (select count(*) from adjust where pay_no = p.pay_no) settlement
            from pay p
            left join helplist h on (p.pay_goods = h.help_no)
            left join helper hh on (h.helper_no = hh.helper_no)
            left join member mem on (hh.member_no = mem.member_no)
            where pay_category=1 and pay_status='정산대기')
			<choose>
				<when test="type != null and type.equals('memberId')">
					where pay_id like '%'||#{keyword}||'%'
				</when>
				<when test="type != null and type.equals('memberId2')">
					where member_id like '%'||#{keyword}||'%'
				</when>
			</choose>
			<if test="status != null">
				and settlement in
				<foreach collection="status" item="s" open="(" close=")" separator=",">
						#{s}
				</foreach>
			</if>
			<if test="!startDate.equals('') or !endDate.equals('')">
				<choose>
					<when test="!startDate.equals('') and endDate.equals('')">
						and #{startDate} <![CDATA[ <= ]]> pay_date
					</when>
					<when test="startDate.equals('') and !endDate.equals('')">
						and pay_date <![CDATA[ <= ]]> #{endDate}
					</when>
					<when test="!startDate.equals('') and !endDate.equals('')">
						and #{startDate} <![CDATA[ <= ]]> pay_date and pay_date <![CDATA[ <= ]]> #{endDate}
					</when>
				</choose>
			</if>
	</select>
	<insert id="insertAdjust" parameterType="_int">
		insert into adjust values(adjust_seq.nextval, #{payNo})
	</insert>
	<select id="selectCnt" resultType="kr.or.admin.model.vo.Dashboard">
		select 
		    (select count(*) from house where house_allow in (1,4)) as house,
		    (select count(*) from helper where helper_status in (1,4)) as helper,
		    (select count(*) from report where report_status=1) as report
		from dual
	</select>
</mapper>