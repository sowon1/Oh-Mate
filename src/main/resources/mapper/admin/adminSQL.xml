<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="admin">
	<select id="selectAllMember" parameterType="map" resultType="m">
		select
			member_no as memberNo,
			member_level as memberLevel,
			member_id as memberId,
			member_name as memberName,
			phone,
			enroll_date as enrollDate
		from (select rownum as rnum, m.* from (SELECT * FROM MEMBER order by 1 desc)m)mm
		where rnum between #{start} and #{end}
	</select>
	<select id="memberTotal" resultType="_int">
		select count(*) from member
	</select>
	<select id="searchMember" parameterType="map" resultType="m">
		select
			member_no as memberNo,
			member_level as memberLevel,
			member_id as memberId,
			member_name as memberName,
			phone,
			enroll_date as enrollDate
		from (select rownum as rnum, m.* from (select * from member
		<choose>
			<when test="type != null and type.equals('memberId')">
				where member_id like '%'||#{keyword}||'%'
			</when>
			<when test="type != null and type.equals('memberName')">
				where member_name like '%'||#{keyword}||'%'
			</when>
			<when test="type != null and type.equals('phone')">
				where phone like '%'||#{keyword}||'%'
			</when>
		</choose>
		<if test="level != null">
			and member_level in
			<foreach collection="level" item="l" open="(" close=")" separator=",">
				<choose>
					<when test='l == 1'>
						1,5
					</when>
					<when test='l == 3'>
						3,6,7
					</when>
					<otherwise>
						#{l}
					</otherwise>
				</choose>
			</foreach>
		</if>
		order by 1 desc)m)mm
		where rnum between #{start} and #{end}
	</select>
	<select id="totalSearch" parameterType="map" resultType="_int">
		select count(*) from member
		<choose>
			<when test="type != null and type.equals('memberId')">
				where member_id like '%'||#{keyword}||'%'
			</when>
			<when test="type != null and type.equals('memberName')">
				where member_name like '%'||#{keyword}||'%'
			</when>
			<when test="type != null and type.equals('phone')">
				where phone like '%'||#{keyword}||'%'
			</when>
		</choose>
		<if test="level != null">
			and member_level in
			<foreach collection="level" item="l" open="(" close=")" separator=",">
				<choose>
					<when test='l == 1'>
						1,5
					</when>
					<when test='l == 3'>
						3,6,7
					</when>
					<otherwise>
						#{l}
					</otherwise>
				</choose>
			</foreach>
		</if>
	</select>
	<select id="selectMemberInfo" parameterType="_int" resultType="m">
		select
			member_no as memberNo,
			member_id as memberId,
			member_pw as memberPw,
			member_name as memberName,
			phone,
			email,
			enroll_date as enrollDate,
			member_filepath as filepath,
			member_level as memberLevel,
			gender,
			age,
			profile_status as profileStatus
		from member where member_no=#{memberNo}
	</select>
	<update id="memberUpdate" parameterType="um">
		update member set
		<if test="filepath != null">
			member_filepath = #{filepath},		
		</if>
			member_pw = #{memberPw},
			member_name = #{memberName},
			phone = #{phone},
			gender = #{gender},
			age = #{age}
		<if test="helperStatus != null or memberLevel == 5 or memberLevel == 7">
			<choose>
				<when test="memberLevel == 4 and helperStatus.equals('on')">
					,member_level = 5
				</when>
				<when test="memberLevel == 6 and helperStatus.equals('on')">
					,member_level = 7
				</when>
				<when test="memberLevel == 5 and helperStatus == null">
					,member_level = 4
				</when>
				<when test="memberLevel == 7 and helperStatus == null">
					,member_level = 6
				</when>
			</choose>
		</if>
		where member_no = #{memberNo}
	</update>
	<insert id="insertProfile" parameterType="kr.or.profile.model.vo.Profile">
		insert into profile values(p_seq.nextval, #{pWriter}, #{pGender}, #{pAge}, #{pLocal},
												#{pSmoke}, #{pPet}, #{pCleaning}, #{pPattern})
	</insert>
	<select id="selectProfile" parameterType="string" resultType="kr.or.profile.model.vo.Profile">
		select
			p_no as pNo,
			p_writer as pWriter,
			p_gender as pGender,
			p_age as pAge,
			p_local as pLocal,
			p_smoke as pSmoke,
			p_pet as pPet,
			p_cleaning as pCleaning,
			p_pattern as pPattern
		from profile where p_writer=#{memberId}
	</select>
	<update id="updateProfile" parameterType="kr.or.profile.model.vo.Profile">
		update profile set
			p_writer = #{pWriter},
			p_gender = #{pGender},
			p_age = #{pAge},
			p_local = #{pLocal},
			p_smoke = #{pSmoke},
			p_pet = #{pPet},
			p_cleaning = #{pCleaning},
			p_pattern = #{pPattern}
		where p_writer = #{pWriter}
	</update>
	<delete id="deleteProfile" parameterType="string">
		delete from profile where p_writer = #{pWriter}
	</delete>
	<select id="selectAllReport" parameterType="map" resultType="rp">
		select
			report_no as reportNo,
			report_category as reportCategory,
			report_num as reportNum,
			reporter,
			atacker,
    		(select member_id from member where member_no=reporter) reporterId,
    		(select member_id from member where member_no=atacker) atackerId,
			report_content as reportContent,
			report_date as reportDate,
			report_status as reportStatus
		from (select rownum as rnum, r.* from (SELECT * FROM report order by 1 desc)r)rr
		where rnum between #{start} and #{end}
	</select>
	<select id="reportTotal" resultType="_int">
		select count(*) from report
	</select>
	<select id="searchReport" parameterType="map" resultType="rp">
		select
		    report_no as reportNo,
		    report_category as reportCategory,
		    report_num as reportNum,
		    reporter,
		    atacker,
		    (select member_id from member where member_no=reporter) reporterId,
		    (select member_id from member where member_no=atacker) atackerId,
		    report_content as reportContent,
		    report_date as reportDate,
		    report_status as reportStatus
		from (select rownum as rnum, r.* from (select * from report
		<choose>
			<when test="type != null and type.equals('reporterId')">
				where reporter in (select member_no from member where member_id like '%'||#{keyword}||'%')
			</when>
			<when test="type != null and type.equals('atackerId')">
				where atacker in (select member_no from member where member_id like '%'||#{keyword}||'%')
			</when>
			<when test="type != null and type.equals('reportNum')">
				where report_num like '%'||#{keyword}||'%'
			</when>
		</choose>
		<if test="status != null">
			and report_status in
			<foreach collection="status" item="s" open="(" close=")" separator=",">
				#{s}
			</foreach>
		</if>
		<if test="cate != null">
			and report_category in
			<foreach collection="cate" item="c" open="(" close=")" separator=",">
				#{c}
			</foreach>
		</if>
		order by 1 desc)r)rr
		where rnum between #{start} and #{end}
	</select>
	<select id="totalSearchReport" parameterType="map" resultType="_int">
		select count(*) from report
		<choose>
			<when test="type != null and type.equals('reporterId')">
				where reporter in (select member_no from member where member_id like '%'||#{keyword}||'%')
			</when>
			<when test="type != null and type.equals('atackerId')">
				where atacker in (select member_no from member where member_id like '%'||#{keyword}||'%')
			</when>
			<when test="type != null and type.equals('reportNum')">
				where report_num like '%'||#{keyword}||'%'
			</when>
		</choose>
		<if test="status != null">
			and report_status in
			<foreach collection="status" item="s" open="(" close=")" separator=",">
				#{s}
			</foreach>
		</if>
		<if test="cate != null">
			and report_category in
			<foreach collection="cate" item="c" open="(" close=")" separator=",">
				#{c}
			</foreach>
		</if>
	</select>
</mapper>